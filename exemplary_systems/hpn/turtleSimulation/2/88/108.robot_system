<Behaviour>
<robotSystemName>turtleSimulation</robotSystemName>
<agentName>agent</agentName>
<subsystemName>ve</subsystemName>
<subsystemType></subsystemType>
<behaviourName>Rotate</behaviourName>
<behaviourId>1</behaviourId>
<transitionFunctionPlaceId>1</transitionFunctionPlaceId>
<sendDataPlaceId>2</sendDataPlaceId>
<receiveDataPlaceId>4</receiveDataPlaceId>
<terminalConditionTransitionId>5</terminalConditionTransitionId>
<continueConditionTransitionId>4</continueConditionTransitionId>
<terminalConditionBody> _veTerminalCondition.data==1 </terminalConditionBody>
<errorConditionBody>false</errorConditionBody>
<transitionFunctionBody>/* Partial transition function - name - tf1_1*/

std::cout<<"Message="<<_inputBufferDirection.data<<std::endl;

// wait for cmd from control subsystem



if(_inputBufferDirection.data != _currentDirection.data){ // there is new direction specified
	_currentDirection.data=_inputBufferDirection.data; // update current direction
	_isNewDirectionSpecified.data=1;
	_rotationSpeed.data=ROTATE_ANGLE;
	_rotationLeft.data=0;
	_rotationRight.data=0;
	
	if(_inputBufferDirection.data == GO_NORTH)
		_desiredAngle.data=GO_NORTH_DIRECTION;
	else if(_inputBufferDirection.data == GO_EAST)
		_desiredAngle.data=GO_EAST_DIRECTION;
	else if(_inputBufferDirection.data == GO_SOUTH)
		_desiredAngle.data=GO_SOUTH_DIRECTION;
	else if(_inputBufferDirection.data == GO_WEST)
		_desiredAngle.data=GO_WEST_DIRECTION;
}
else { // the same direction do nothing
	// do nothing
}

if(_isNewDirectionSpecified.data == 0){
	return;
}

// checks if this is the first iteration of rotate behaviour (first after move along behaviour) - if so set current robot position
if(_isFirstIterationOfRotate.data==1){ // set current robot position - only once at the beginning of rotate behaviour
	_isFirstIterationOfRotate.data=0;
	_internalBufferLastTurtlePosition=_inputBufferTurtlePose;
}

//if(abs(_inputBufferTurtlePose.theta-_internalBufferLastTurtlePosition.theta)>std::atan(1.0)*4){ // if the turtle moved around a circle (the measured angle switches from -pi to + pi)
//	_internalBufferLastTurtlePosition=_inputBufferTurtlePose;
//}

// rotate by specific angle around z-axis
_outputBufferTwist.linear.x=0; 							// do not move in x-y plane

std_msgs::Float64 tmp, tmpCurrentTheta;
tmpCurrentTheta.data=_inputBufferTurtlePose.theta;
if(tmpCurrentTheta.data<0 && _inputBufferDirection.data != GO_EAST){
	tmpCurrentTheta.data+=TWO_PI;
}

tmp.data=(_desiredAngle.data -tmpCurrentTheta.data);
if(tmp.data < -EPSILON){
	_outputBufferTwist.angular.z=-_rotationSpeed.data; 	// rotate by small angle around z axis -- rotate left
	_rotationLeft.data=1;
}
else if (tmp.data>EPSILON){
	_outputBufferTwist.angular.z=_rotationSpeed.data; 	// rotate by small angle around z axis -- rotate right
	_rotationRight.data=1;
}

if(	_rotationLeft.data==1 && _rotationRight.data==1){
	_rotationSpeed.data/=2;
	_rotationLeft.data=0;
	_rotationRight.data=0;
}

//_veTerminalCondition.data=abs(_inputBufferTurtlePose.theta-_internalBufferLastTurtlePosition.theta)>std::atan(1.0)*4 || abs(_desiredAngle.data - abs(_internalBufferLastTurtlePosition.theta-_inputBufferTurtlePose.theta)) < EPSILON;




_veTerminalCondition.data=abs(tmp.data) < EPSILON;

_rotationCompleted.data=_veTerminalCondition.data; // set if rotation was completed


//_internalBufferInt.data=_inputBufferDirection.data;

std::cout<<"[Rotate] -- Turtle desired_theta="<< _desiredAngle.data<<" current_theta="<<_inputBufferTurtlePose.theta<<" delta="<<tmp.data<<" terminal condition="<<_veTerminalCondition.data<<std::endl;
								
</transitionFunctionBody>
<sendDataBody>std::cout<<"[Behaviour Rotate] -- Sending Data"<<std::endl;</sendDataBody>
<receiveDataBody>std::cout<<"[Behaviour Rotate] -- Receiving Data"<<std::endl;</receiveDataBody>
</Behaviour>

