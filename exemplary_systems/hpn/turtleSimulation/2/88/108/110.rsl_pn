<Places>
<Place>
	<id>111</id>
	<hasAction>0</hasAction>
	<isHierarchical>0</isHierarchical>
	<isInputPlace>1</isInputPlace>
	<isOutputPlace>0</isOutputPlace>
	<isAssociated>0</isAssociated>
	<associatedPlaceId>-1</associatedPlaceId>
	<isPetriNetDetermined>1</isPetriNetDetermined>
	<numberOfTokens>0</numberOfTokens>
	<placeName>^{}\rm p_{agent,ve,Rotate, in}^{}</placeName>
	<isLatexLabelVisible>0</isLatexLabelVisible>
	<actionCode></actionCode>
	<isCorrect>1</isCorrect>
	<pos><posX>230</posX><posY>100</posY></pos>
	<inputEdgesList></inputEdgesList>
	<outputEdgesList>0</outputEdgesList>
<petriNetLayer>4</petriNetLayer>
<isPlaceNameGenerated>0</isPlaceNameGenerated>
</Place>
<Place>
	<id>112</id>
	<hasAction>1</hasAction>
	<isHierarchical>0</isHierarchical>
	<isInputPlace>0</isInputPlace>
	<isOutputPlace>0</isOutputPlace>
	<isAssociated>0</isAssociated>
	<associatedPlaceId>-1</associatedPlaceId>
	<isPetriNetDetermined>1</isPetriNetDetermined>
	<numberOfTokens>0</numberOfTokens>
	<placeName>^{}\rm p_{agent,ve,Rotate, 1}^{f}</placeName>
	<isLatexLabelVisible>0</isLatexLabelVisible>
	<actionCode>
std::cout<<"Message="<<_inputBufferDirection.data<<std::endl;

// wait for cmd from control subsystem



if(_inputBufferDirection.data != _currentDirection.data){ // there is new direction specified
	_currentDirection.data=_inputBufferDirection.data; // update current direction
	_isNewDirectionSpecified.data=1;
	_rotationSpeed.data=ROTATE_ANGLE;
	_rotationLeft.data=0;
	_rotationRight.data=0;
	
	if(_inputBufferDirection.data == GO_NORTH)
		_desiredAngle.data=GO_NORTH_DIRECTION;
	else if(_inputBufferDirection.data == GO_EAST)
		_desiredAngle.data=GO_EAST_DIRECTION;
	else if(_inputBufferDirection.data == GO_SOUTH)
		_desiredAngle.data=GO_SOUTH_DIRECTION;
	else if(_inputBufferDirection.data == GO_WEST)
		_desiredAngle.data=GO_WEST_DIRECTION;
}
else { // the same direction do nothing
	// do nothing
}

if(_isNewDirectionSpecified.data == 0){
	return;
}

// checks if this is the first iteration of rotate behaviour (first after move along behaviour) - if so set current robot position
if(_isFirstIterationOfRotate.data==1){ // set current robot position - only once at the beginning of rotate behaviour
	_isFirstIterationOfRotate.data=0;
	_internalBufferLastTurtlePosition=_inputBufferTurtlePose;
}

//if(abs(_inputBufferTurtlePose.theta-_internalBufferLastTurtlePosition.theta)>std::atan(1.0)*4){ // if the turtle moved around a circle (the measured angle switches from -pi to + pi)
//	_internalBufferLastTurtlePosition=_inputBufferTurtlePose;
//}

// rotate by specific angle around z-axis
_outputBufferTwist.linear.x=0; 							// do not move in x-y plane

std_msgs::Float64 tmp, tmpCurrentTheta;
tmpCurrentTheta.data=_inputBufferTurtlePose.theta;
if(tmpCurrentTheta.data<0 && _inputBufferDirection.data != GO_EAST){
	tmpCurrentTheta.data+=TWO_PI;
}

tmp.data=(_desiredAngle.data -tmpCurrentTheta.data);
if(tmp.data < -EPSILON){
	_outputBufferTwist.angular.z=-_rotationSpeed.data; 	// rotate by small angle around z axis -- rotate left
	_rotationLeft.data=1;
}
else if (tmp.data>EPSILON){
	_outputBufferTwist.angular.z=_rotationSpeed.data; 	// rotate by small angle around z axis -- rotate right
	_rotationRight.data=1;
}

if(	_rotationLeft.data==1 && _rotationRight.data==1){
	_rotationSpeed.data/=2;
	_rotationLeft.data=0;
	_rotationRight.data=0;
}

//_veTerminalCondition.data=abs(_inputBufferTurtlePose.theta-_internalBufferLastTurtlePosition.theta)>std::atan(1.0)*4 || abs(_desiredAngle.data - abs(_internalBufferLastTurtlePosition.theta-_inputBufferTurtlePose.theta)) < EPSILON;




_veTerminalCondition.data=abs(tmp.data) < EPSILON;

_rotationCompleted.data=_veTerminalCondition.data; // set if rotation was completed


//_internalBufferInt.data=_inputBufferDirection.data;

std::cout<<"[Rotate] -- Turtle desired_theta="<< _desiredAngle.data<<" current_theta="<<_inputBufferTurtlePose.theta<<" delta="<<tmp.data<<" terminal condition="<<_veTerminalCondition.data<<std::endl;
								</actionCode>
	<isCorrect>1</isCorrect>
	<pos><posX>230</posX><posY>240</posY></pos>
	<inputEdgesList>1</inputEdgesList>
	<outputEdgesList>3</outputEdgesList>
<petriNetLayer>4</petriNetLayer>
<isPlaceNameGenerated>0</isPlaceNameGenerated>
</Place>
<Place>
	<id>113</id>
	<hasAction>0</hasAction>
	<isHierarchical>0</isHierarchical>
	<isInputPlace>0</isInputPlace>
	<isOutputPlace>1</isOutputPlace>
	<isAssociated>0</isAssociated>
	<associatedPlaceId>-1</associatedPlaceId>
	<isPetriNetDetermined>1</isPetriNetDetermined>
	<numberOfTokens>0</numberOfTokens>
	<placeName>^{}\rm p_{agent,ve,Rotate, out}^{}</placeName>
	<isLatexLabelVisible>0</isLatexLabelVisible>
	<actionCode></actionCode>
	<isCorrect>1</isCorrect>
	<pos><posX>230</posX><posY>380</posY></pos>
	<inputEdgesList>2</inputEdgesList>
	<outputEdgesList></outputEdgesList>
<petriNetLayer>4</petriNetLayer>
<isPlaceNameGenerated>0</isPlaceNameGenerated>
</Place>
</Places>
<Transitions>
<Transition>
	<id>87</id>
	<transitionName>^{}\rm t_{agent,ve,Rotate, in}</transitionName>
	<transitionCondition>[true]</transitionCondition>
	<transitionPriority>1</transitionPriority>
	<isCorrect>1</isCorrect>
	<isLatexLabelVisible>0</isLatexLabelVisible>
	<pos><posX>205</posX><posY>170</posY></pos>
	<inputEdgesList>0</inputEdgesList>
	<outputEdgesList>1</outputEdgesList>
<petriNetLayer>4</petriNetLayer>
<isTransitionNameGenerated>0</isTransitionNameGenerated>
</Transition>
<Transition>
	<id>88</id>
	<transitionName>^{}\rm t_{agent,ve,Rotate, out}</transitionName>
	<transitionCondition>[true]</transitionCondition>
	<transitionPriority>1</transitionPriority>
	<isCorrect>1</isCorrect>
	<isLatexLabelVisible>0</isLatexLabelVisible>
	<pos><posX>205</posX><posY>310</posY></pos>
	<inputEdgesList>3</inputEdgesList>
	<outputEdgesList>2</outputEdgesList>
<petriNetLayer>4</petriNetLayer>
<isTransitionNameGenerated>0</isTransitionNameGenerated>
</Transition>
</Transitions>
<Edges>
<Edge>
	<isPlaceTransitionEdge>1</isPlaceTransitionEdge>
	<place>0</place>
	<transition>0</transition>
	<isCorrect>1</isCorrect>
	<isNorthHeaded>0</isNorthHeaded>
	<temporaryPoint><posX>255</posX><posY>255</posY></temporaryPoint>
	<listOfPoints>	<Point><posX>255</posX><posY>125</posY></Point>
	<Point><posX>255</posX><posY>170</posY></Point>
</listOfPoints>
</Edge>
<Edge>
	<isPlaceTransitionEdge>0</isPlaceTransitionEdge>
	<place>1</place>
	<transition>0</transition>
	<isCorrect>1</isCorrect>
	<isNorthHeaded>0</isNorthHeaded>
	<temporaryPoint><posX>265</posX><posY>265</posY></temporaryPoint>
	<listOfPoints>	<Point><posX>255</posX><posY>190</posY></Point>
	<Point><posX>255</posX><posY>265</posY></Point>
</listOfPoints>
</Edge>
<Edge>
	<isPlaceTransitionEdge>0</isPlaceTransitionEdge>
	<place>2</place>
	<transition>1</transition>
	<isCorrect>1</isCorrect>
	<isNorthHeaded>0</isNorthHeaded>
	<temporaryPoint><posX>405</posX><posY>405</posY></temporaryPoint>
	<listOfPoints>	<Point><posX>255</posX><posY>330</posY></Point>
	<Point><posX>255</posX><posY>405</posY></Point>
</listOfPoints>
</Edge>
<Edge>
	<isPlaceTransitionEdge>1</isPlaceTransitionEdge>
	<place>1</place>
	<transition>1</transition>
	<isCorrect>1</isCorrect>
	<isNorthHeaded>0</isNorthHeaded>
	<temporaryPoint><posX>255</posX><posY>255</posY></temporaryPoint>
	<listOfPoints>	<Point><posX>255</posX><posY>265</posY></Point>
	<Point><posX>255</posX><posY>310</posY></Point>
</listOfPoints>
</Edge>
</Edges>
<IncludeFile></IncludeFile>

