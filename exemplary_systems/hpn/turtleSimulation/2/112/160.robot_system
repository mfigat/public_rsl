<Behaviour>
<robotSystemName>turtleSimulation</robotSystemName>
<agentName>agent</agentName>
<subsystemName>ve</subsystemName>
<subsystemType></subsystemType>
<behaviourName>Rotate</behaviourName>
<behaviourId>2</behaviourId>
<transitionFunctionPlaceId>1</transitionFunctionPlaceId>
<sendDataPlaceId>2</sendDataPlaceId>
<receiveDataPlaceId>4</receiveDataPlaceId>
<terminalConditionTransitionId>5</terminalConditionTransitionId>
<continueConditionTransitionId>4</continueConditionTransitionId>
<terminalConditionBody> _veTerminalCondition.data==1 </terminalConditionBody>
<errorConditionBody>false</errorConditionBody>
<transitionFunctionBody>/* Partial transition function - name - tf1_1*/

// code
_veTerminalCondition.data=0;
_beginMovement.data=0;
_lastTurtlePosition.x=_turtlePose.x; // update turtle pose - for move along behaviour
_lastTurtlePosition.y=_turtlePose.y; // update turtle pose - for move along behaviour
// #########################

// do something

// ###################################################################################################################
// get quarter
std_msgs::Int64 quarter;
if(_turtlePose.theta>=GO_EAST_DIRECTION && _turtlePose.theta<GO_NORTH_DIRECTION){
	quarter.data=1;
}
else if(_turtlePose.theta>=GO_NORTH_DIRECTION && _turtlePose.theta<=GO_WEST_DIRECTION){
	quarter.data=2;
}
else if(_turtlePose.theta>=-GO_WEST_DIRECTION && _turtlePose.theta<GO_SOUTH_DIRECTION){
	quarter.data=3;
}
else if(_turtlePose.theta>=GO_SOUTH_DIRECTION && _turtlePose.theta<GO_EAST_DIRECTION){
	quarter.data=4;
}

std::cout<<"[VE - ROTATE] - CURRENT QUARTER="<<quarter.data<<std::endl;
// ##################################################################################################################

if(_desiredDirection.data == GO_NORTH){
	if(quarter.data==1) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
	if(quarter.data==2) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
	if(quarter.data==3) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
	if(quarter.data==4) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
}
else if(_desiredDirection.data == GO_EAST){
	if(quarter.data==1) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
	if(quarter.data==2) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
	if(quarter.data==3) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
	if(quarter.data==4) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
}
else if(_desiredDirection.data == GO_SOUTH){
	if(quarter.data==1) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
	if(quarter.data==2) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
	if(quarter.data==3) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
	if(quarter.data==4) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
}
else if(_desiredDirection.data == GO_WEST){
	if(quarter.data==1) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
	if(quarter.data==2) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
	if(quarter.data==3) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
	if(quarter.data==4) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
}

std_msgs::Float64 tmp;
tmp.data=abs(_desiredAngle.data -_turtlePose.theta);

if(	_rotationLeft.data==1 && _rotationRight.data==1){
	_rotationSpeed.data/=2;
	std::cout<<"[VE - ROTATE] - _rotationSpeed - divided by 2 - _rotationSpeed.data="<<_rotationSpeed.data<<std::endl;
	_rotationLeft.data=0;
	_rotationRight.data=0;
}

_veTerminalCondition.data=tmp.data < EPSILON_ROTATE;

// #########################

std::cout<<"[VE - ROTATE] - direction="<<_desiredDirection.data<<std::endl;

								
</transitionFunctionBody>
<sendDataBody>std::cout<<"[Behaviour Rotate] -- Sending Data"<<std::endl;</sendDataBody>
<receiveDataBody>std::cout<<"[Behaviour Rotate] -- Receiving Data"<<std::endl;</receiveDataBody>
</Behaviour>

