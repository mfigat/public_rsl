<Places>
<Place>
	<id>163</id>
	<hasAction>0</hasAction>
	<isHierarchical>0</isHierarchical>
	<isInputPlace>1</isInputPlace>
	<isOutputPlace>0</isOutputPlace>
	<isAssociated>0</isAssociated>
	<associatedPlaceId>-1</associatedPlaceId>
	<isPetriNetDetermined>1</isPetriNetDetermined>
	<numberOfTokens>0</numberOfTokens>
	<placeName>^{}\rm p_{agent,ve,Rotate, in}^{}</placeName>
	<isLatexLabelVisible>0</isLatexLabelVisible>
	<actionCode></actionCode>
	<isCorrect>1</isCorrect>
	<pos><posX>230</posX><posY>100</posY></pos>
	<inputEdgesList></inputEdgesList>
	<outputEdgesList>0</outputEdgesList>
<petriNetLayer>4</petriNetLayer>
<isPlaceNameGenerated>0</isPlaceNameGenerated>
</Place>
<Place>
	<id>164</id>
	<hasAction>1</hasAction>
	<isHierarchical>0</isHierarchical>
	<isInputPlace>0</isInputPlace>
	<isOutputPlace>0</isOutputPlace>
	<isAssociated>0</isAssociated>
	<associatedPlaceId>-1</associatedPlaceId>
	<isPetriNetDetermined>1</isPetriNetDetermined>
	<numberOfTokens>0</numberOfTokens>
	<placeName>^{}\rm p_{agent,ve,Rotate, 1}^{f}</placeName>
	<isLatexLabelVisible>0</isLatexLabelVisible>
	<actionCode>
// code
_veTerminalCondition.data=0;
_beginMovement.data=0;
_lastTurtlePosition.x=_turtlePose.x; // update turtle pose - for move along behaviour
_lastTurtlePosition.y=_turtlePose.y; // update turtle pose - for move along behaviour
// #########################

// do something

// ###################################################################################################################
// get quarter
std_msgs::Int64 quarter;
if(_turtlePose.theta>=GO_EAST_DIRECTION && _turtlePose.theta<GO_NORTH_DIRECTION){
	quarter.data=1;
}
else if(_turtlePose.theta>=GO_NORTH_DIRECTION && _turtlePose.theta<=GO_WEST_DIRECTION){
	quarter.data=2;
}
else if(_turtlePose.theta>=-GO_WEST_DIRECTION && _turtlePose.theta<GO_SOUTH_DIRECTION){
	quarter.data=3;
}
else if(_turtlePose.theta>=GO_SOUTH_DIRECTION && _turtlePose.theta<GO_EAST_DIRECTION){
	quarter.data=4;
}

std::cout<<"[VE - ROTATE] - CURRENT QUARTER="<<quarter.data<<std::endl;
// ##################################################################################################################

if(_desiredDirection.data == GO_NORTH){
	if(quarter.data==1) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
	if(quarter.data==2) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
	if(quarter.data==3) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
	if(quarter.data==4) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
}
else if(_desiredDirection.data == GO_EAST){
	if(quarter.data==1) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
	if(quarter.data==2) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
	if(quarter.data==3) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
	if(quarter.data==4) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
}
else if(_desiredDirection.data == GO_SOUTH){
	if(quarter.data==1) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
	if(quarter.data==2) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
	if(quarter.data==3) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
	if(quarter.data==4) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
}
else if(_desiredDirection.data == GO_WEST){
	if(quarter.data==1) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
	if(quarter.data==2) {_outputBufferTwist.angular.z=_rotationSpeed.data; _rotationLeft.data=1; }
	if(quarter.data==3) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
	if(quarter.data==4) {_outputBufferTwist.angular.z=-_rotationSpeed.data; _rotationRight.data=1; }
}

std_msgs::Float64 tmp;
tmp.data=abs(_desiredAngle.data -_turtlePose.theta);

if(	_rotationLeft.data==1 && _rotationRight.data==1){
	_rotationSpeed.data/=2;
	std::cout<<"[VE - ROTATE] - _rotationSpeed - divided by 2 - _rotationSpeed.data="<<_rotationSpeed.data<<std::endl;
	_rotationLeft.data=0;
	_rotationRight.data=0;
}

_veTerminalCondition.data=tmp.data < EPSILON_ROTATE;

// #########################

std::cout<<"[VE - ROTATE] - direction="<<_desiredDirection.data<<std::endl;

								</actionCode>
	<isCorrect>1</isCorrect>
	<pos><posX>230</posX><posY>240</posY></pos>
	<inputEdgesList>1</inputEdgesList>
	<outputEdgesList>3</outputEdgesList>
<petriNetLayer>4</petriNetLayer>
<isPlaceNameGenerated>0</isPlaceNameGenerated>
</Place>
<Place>
	<id>165</id>
	<hasAction>0</hasAction>
	<isHierarchical>0</isHierarchical>
	<isInputPlace>0</isInputPlace>
	<isOutputPlace>1</isOutputPlace>
	<isAssociated>0</isAssociated>
	<associatedPlaceId>-1</associatedPlaceId>
	<isPetriNetDetermined>1</isPetriNetDetermined>
	<numberOfTokens>0</numberOfTokens>
	<placeName>^{}\rm p_{agent,ve,Rotate, out}^{}</placeName>
	<isLatexLabelVisible>0</isLatexLabelVisible>
	<actionCode></actionCode>
	<isCorrect>1</isCorrect>
	<pos><posX>230</posX><posY>380</posY></pos>
	<inputEdgesList>2</inputEdgesList>
	<outputEdgesList></outputEdgesList>
<petriNetLayer>4</petriNetLayer>
<isPlaceNameGenerated>0</isPlaceNameGenerated>
</Place>
</Places>
<Transitions>
<Transition>
	<id>135</id>
	<transitionName>^{}\rm t_{agent,ve,Rotate, in}</transitionName>
	<transitionCondition>[true]</transitionCondition>
	<transitionPriority>1</transitionPriority>
	<isCorrect>1</isCorrect>
	<isLatexLabelVisible>0</isLatexLabelVisible>
	<pos><posX>205</posX><posY>170</posY></pos>
	<inputEdgesList>0</inputEdgesList>
	<outputEdgesList>1</outputEdgesList>
<petriNetLayer>4</petriNetLayer>
<isTransitionNameGenerated>0</isTransitionNameGenerated>
</Transition>
<Transition>
	<id>136</id>
	<transitionName>^{}\rm t_{agent,ve,Rotate, out}</transitionName>
	<transitionCondition>[true]</transitionCondition>
	<transitionPriority>1</transitionPriority>
	<isCorrect>1</isCorrect>
	<isLatexLabelVisible>0</isLatexLabelVisible>
	<pos><posX>205</posX><posY>310</posY></pos>
	<inputEdgesList>3</inputEdgesList>
	<outputEdgesList>2</outputEdgesList>
<petriNetLayer>4</petriNetLayer>
<isTransitionNameGenerated>0</isTransitionNameGenerated>
</Transition>
</Transitions>
<Edges>
<Edge>
	<isPlaceTransitionEdge>1</isPlaceTransitionEdge>
	<place>0</place>
	<transition>0</transition>
	<isCorrect>1</isCorrect>
	<isNorthHeaded>0</isNorthHeaded>
	<temporaryPoint><posX>255</posX><posY>255</posY></temporaryPoint>
	<listOfPoints>	<Point><posX>255</posX><posY>125</posY></Point>
	<Point><posX>255</posX><posY>170</posY></Point>
</listOfPoints>
</Edge>
<Edge>
	<isPlaceTransitionEdge>0</isPlaceTransitionEdge>
	<place>1</place>
	<transition>0</transition>
	<isCorrect>1</isCorrect>
	<isNorthHeaded>0</isNorthHeaded>
	<temporaryPoint><posX>265</posX><posY>265</posY></temporaryPoint>
	<listOfPoints>	<Point><posX>255</posX><posY>190</posY></Point>
	<Point><posX>255</posX><posY>265</posY></Point>
</listOfPoints>
</Edge>
<Edge>
	<isPlaceTransitionEdge>0</isPlaceTransitionEdge>
	<place>2</place>
	<transition>1</transition>
	<isCorrect>1</isCorrect>
	<isNorthHeaded>0</isNorthHeaded>
	<temporaryPoint><posX>405</posX><posY>405</posY></temporaryPoint>
	<listOfPoints>	<Point><posX>255</posX><posY>330</posY></Point>
	<Point><posX>255</posX><posY>405</posY></Point>
</listOfPoints>
</Edge>
<Edge>
	<isPlaceTransitionEdge>1</isPlaceTransitionEdge>
	<place>1</place>
	<transition>1</transition>
	<isCorrect>1</isCorrect>
	<isNorthHeaded>0</isNorthHeaded>
	<temporaryPoint><posX>255</posX><posY>255</posY></temporaryPoint>
	<listOfPoints>	<Point><posX>255</posX><posY>265</posY></Point>
	<Point><posX>255</posX><posY>310</posY></Point>
</listOfPoints>
</Edge>
</Edges>
<IncludeFile></IncludeFile>

